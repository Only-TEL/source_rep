Leader      LeaderZooKeeperServer#setupRequestProcessors
    PrepRequestProcessor -> ProposalRequestProcessor -> CommitProcessor -> ToBeAppliedRequestProcessor -> FinalRequestProcessor
    SyncRequestProcessor -> AckRequestProcessor

Follower    FollowerZooKeeperServer#setupRequestProcessors
    FollowerRequestProcessor -> CommitProcessor -> FinalRequestProcessor
    SyncRequestProcessor -> SendAckRequestProcessor

Observer    ObserverZooKeeperServer#setupRequestProcessors
    ObserverRequestProcessor -> CommitProcessor -> FinalRequestProcessor
    (如果开启了数据持久化 SyncRequestProcessor 进行持久化数据)

Leader   LearnerHandler#run
Follower Follower#processPacket
Observer Observer#processPacket

每一台机器都是一个QuorumPeer
启动监听客户端入口：
    QuorumPeerMain#runFromConfig -> QuorumPeer#start -> 运行NIOServerCnxnFactory#start -> NIOServerCnxnFactory#run -> 监听客户端的channel
    获取每一个与客户端关联的NIOServerCnxn -> NIOServerCnxn#doIO -> NIOServerCnxn#readPayload
        -> NIOServerCnxn#readConnectRequest -> ZooKeeperServer#processConnectRequest -> ZooKeeperServer#createSession ....
        -> NIOServerCnxn#readRequest -> ZooKeeperServer#processPacket -> ZooKeeperServer#submitRequest -> 请求处理链开始处理

Leader处理客户端的请求
    PrepRequestProcessor#processRequest -> 加入到阻塞队列中 -> PrepRequestProcessor#run -> PrepRequestProcessor.next.processRequest()
    ProposalRequestProcessor#processRequest -> CommitProcessor#processRequest
                                            -如果存在zxid-> SyncRequestProcessor#processRequest
CommitProcessor#processRequest -> 加入到queuedRequests链表中 -> CommitProcessor#run -> 阻塞住，等待log的完成/如果有committedRequest加入到committedRequests集合中时，会唤醒
    -> 检测是否可以进入下一个处理器处理 -> 如果可以的话，就将这个请求加入到toProcess中，下一次循环直接读取toProcess中的request进入下一处理阶段

SyncRequestProcessor#processRequest -> 把请求加入到queuedRequests阻塞队列中 -> SyncRequestProcessor#run -生成zxid，记录日志 -> SyncRequestProcessor.next#processRequest
    -> AckRequestProcessor#processRequest -> Leader.processAck -向follower发送commit和向observer发送INFORM之后-> 执行commitProcessor.commit(p.request)
    -> CommitProcessor#commit -> 唤醒CommitProcessor#processRequest方法中等待的线程

ToBeAppliedRequestProcessor#processRequest -> FinalRequestProcessor#processRequest -> 更新内存数据，触发watcher回调，注册watcher，响应客户端

Follower处理客户端的请求
    FollowerRequestProcessor#processRequest -> 将request加入queuedRequests阻塞队列 -> FollowerRequestProcessor#run
    -> CommitProcessor#processRequest -> 检查request的类型
    -> zks.getFollower().request(request) 向leader发起request -> Learner#request
        -> LearnerHandler#run()//623行 处理REQUEST -> 读取request，构建Packet，向leader提交packet
        -> Leader处理客户端的请求...
    向follower发起提议：是在PrepRequestProcessor的事务id生成完成之后进行提议
        ProposalRequestProcessor#processRequest 中向follower发送操作提议
        76行：zks.getLeader().propose(request);
        Leader#propose -> Leader#sendPacket -把packet加入到queuedPackets阻塞队列中-> 一旦这个阻塞队列中存在值了，LearnerHandler#sendPackets这个方法马上就会将packet通过socket发送到follower
                            -> LearnerHandler#queuePacket 每一个follower都在forwardingFollowers对应了一个 LearnerHandler /|\
    follower接收提议并向leader发送ACK
        Follower#processPacket -> FollowerZooKeeperServer#logRequest -> SyncRequestProcessor#processRequest 记录日志
            -记录日志完成，向leader发送ACK-> SendAckRequestProcessor#processRequest -> Learner#writePacket 发送ack的packet

    leader接收ACK，并向Follower发起Commit
        LearnerHandler#run -> Leader#processAck -> 一旦过半的follower发送了ack => Leader#commit => Leader#sendPacket
        Leader#processAck 当过半的follower发送ACK过来的时候，会将follower发送commit

        向observer发送：Leader#inform -> Leader#sendObserverPacket -> LearnerHandler#sendPackets 发送packet
        observer接收：Observer#processPacket -INFORM Packet-> ObserverZooKeeperServer#commitRequest -> CommitProcessor#commit(request)
            之后和follower的处理逻辑一致

    Follower接收commit
        Follower#processPacket -> FollowerZooKeeperServer#commit -> CommitProcessor#commit(request)
            -> 唤醒CommitProcessor#processRequest -> FinalRequestProcessor#processRequest -> 更新内存数据，触发watcher回调，注册watcher，响应客户端














