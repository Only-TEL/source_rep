QuorumPeer 类，表示zk服务器
每一台zk服务器启动的时候都会运行
    QuorumPeer#run 方法

org.apache.zookeeper.server.quorum.QuorumPeer#run => 根据机器的角色执行不同线程方法

    leader => Leader#lead
    follower => Follower#followLeader

Leader#lead
    更新当前机器的session、epoch、zxid
    开启一个线程 LearnerCnxAcceptor#run
    lead方法这个线程就会阻塞在这里，等到所有的follower将自身的epoch和zxid发送过来



Follower#followLeader
    连接到Leader
    向Leader发送一个
        packet{
            packetType: Leader.FOLLOWERINFO
            zxid: ZxidUtils.makeZxid(epoch,0) => 构建zxid = 高32为的事务id，第32位的epoch
            data: LearnerInfo{serverId:sid, protocolVersion:0x10000}
        }

LearnerCnxAcceptor#run
    开启了一个socket，阻塞在这里
    同时创建了一个 new LearnerHandler(socket, inputStream, Leader.this)线程对象，并启动了这个线程类
    LearnerHandler#run方法

LearnerHandler#run方法
    接受follower或者observer发送过来的 FOLLOWERINFO || OBSERVERINFO 包，这个包就是上面follower向Leader发送的包
    这里要想象成为很多个follower都会发送packet到这里来，下一步就是来统计这些epoch信息

    Leader#getEpochToPropose 方法，这个方法会保留每次过来的最大的epoch+1，直到超过一半的follower，就返回这个epoch
    将确定的epoch告诉给每一个follower
    QuorumPacket newEpochPacket = new QuorumPacket(Leader.LEADERINFO, ZxidUtils.makeZxid(newEpoch, 0), ver, null);

Follower#followLeader 接受Leader发送过来的epoch信息
    取出最新的epoch与当前节点上的epoch进行比较
        如果比当前的epoch大，就将最初的epoch写入到buffer中
        如果和当前的epoch一致，就在buffer中写入-1
        如果比当前的epoch小，则抛出异常
    开始构建新的packet QuorumPacket ackNewEpoch = new QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, null);
        包括：type: ACK
             Zxid: 最大的一个zxid
             data: 更新前的epoch(如果相等这里为-1)
    把这个ACK包发送给leader
    将这个包发送过后就会返回最新的epoch，并且读取下一个数据包

LearnerHandler#run 读取ACK包
    从这个包中就可以获取follower上的最新的zxId，也会阻塞住，等到所有的follower将zxid发送上来
    这时，epoch已经确定，接下来进行数据同步，首先会拿到上面follower发送过来的zxid
    同步数据的思路：
        快照 + committedLog
        最基础的会将leader上的快照发送给每一个follower,接下来会比较follower上的zxid和leader上的zxid的大小
        1、比较发送过来的zxid和leader上的zxid的大小
            1.1 如果相等，说明数据一致
            1.2 如果比这个最大的committedLog大，说明follower上的数据存在多有的数据，需要将多余的数据删除[maxcommittedLog, zxid]
            1.3 如果在minCommittedLog 和 maxCommittedLog 之间，那么需要同步的数据就是 [zxid, maxcommittedLog]
        2、leader会将本机上的CommittedLog构建成为一个 Proposal 类型的链表集合
        3、遍历这个集合 找到了区间范围之内，就把这个 Proposal 对象中的packet放入queuedPackets中，并且构建一个Commit packet
            QuorumPacket qcommit = new QuorumPacket(Leader.COMMIT, propose.packet.getZxid(),null, null);
            一个 Proposal packet 随后就放入一个 Commit packet
        4、把这个commit packet放入到queuedPackets这个阻塞队列中
        5、向queuedPackets阻塞队列中放入一个 newLeader 类型的packet QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER, ZxidUtils.makeZxid(newEpoch, 0), null, null);
        6、将快照的zxid范围发送给follower，最后将最近的快照数据序列化之后发送给leader
            tag: packet         发送了快照的txid范围
            tag: signature      发送了快照的数据

Follower#followLeader 接受leader的第一个packet => 同步快照的zxid范围
    Learner#syncWithLeader
        DIFF: 不需要同步快照，只需要committedLog
        SNAP: 需要同步快照，只有这种情况才会接受到后面的第二个包，就是序列化了的快照数据
        TRUNC: 需要删除多余的数据
    在接受了上面的包之后，就开始循环接受leader发送过来的committedLog包

LearnerHandler#run
    创建一个线程来发送queuedPackets阻塞队列中的packet
        LearnerHandler#sendPackets 循环从阻塞队列中拿出packet发送给follower

Learner#syncWithLeader 中循环接受PROPOSAL/COMMIT/INFORM/UPTODATE/NEWLEADER
    一个Proposal，一个Commit。最后一个就是newLeader
    newLeader：再次更新epoch，并且发送一个ack到Leader

LearnerHandler#run 读取ACK包
    发送一个UPTODATE类型的packet queuedPackets.add(new QuorumPacket(Leader.UPTODATE, -1, null, null));
    之后就进入一个while(true) 的循环中，会一直监听通道中的数据，来一个packet，就处理一个packet
    ACK/PING/Leader.REVALIDATE/Leader.REQUEST

Learner#syncWithLeader 接收到 UPTODATE 类型的packet，之后就会退出之前的循环
    发送一个ACK到Leader
    启动zookeeperServer，最后如果是不需要同步snap，但是需要同步日志的会在这里继续log数据提交
    然后返回在 Follower#followLeader 方法中进入循环接受packet
        while (this.isRunning()) {
            readPacket(qp);
            processPacket(qp);
        }
    Follower#processPacket
        Leader.PING
        Leader.PROPOSAL
        Leader.COMMIT
        Leader.UPTODATE
        Leader.REVALIDATE
        Leader.SYNC
Observer的处理流程和Follower基本一致，只是















