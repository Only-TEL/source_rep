# zookeeper服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每tickTime会发送一个心跳，单位是毫秒
# zookeeper里最小的会话过期时间就是tickTime的两倍
# 心跳单位
tickTime=2000
# Follower在启动过程中，会从Leader同步所有最新数据，然后确定自己能够对外服务的起始状态。
# Leader允许Follower在 initLimit * tickTime 时间内完成这个工作。
# 如果zk集群的数据量过大，可以考虑增加这个值
initLimit=10
# 在运行过程中，Leader节点负责与zk集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态
# 如果Leader发出心跳检测包在 syncLimit*syncLimit 时间之后，还没有从Follower那里收到响应，那么就认为这个Follower下线了
syncLimit=5
# 存储快照的目录，默认情况下事务日志也在这里。建议单独配置dataLogDir存放数据
dataDir=/usr/local/zookeeper/data
# 客户端连接服务端的端口
clientPort=2181
# 使用SSL侦听安全客户端连接的端口。clientPort指定明文连接的端口，而secureClientPort指定SSL连接的端口。
# 指定两者都启用混合模式，而忽略将禁用该模式。当用户将zookeeper.serverCnxnFactory，zookeeper.clientCnxnSocket作为Netty插件时，将启用SSL功能
# secureClientPort=9001

# 可以同时连接的最大客户端数
maxClientCnxns=60
# 自动清理数据时保留的快照数
autopurge.snapRetainCount=3
# 自动清理数据的间隔时间，单位小时
autopurge.purgeInterval=1
# zk节点配置
#{
# 1:QuorumServer{ip:192.168.222.121,port:2888,electionPort:3888,type:null},
# 2,QuorumServer{ip:192.168.222.122,port:2888,electionPort:3888,type:PARTICIPANT},
# 3,QuorumServer{ip:192.168.222.123,port:2888,electionPort:3888,type:OBERVER},....
#}
server.1=192.168.222.121:2888:3888
server.2=192.168.222.122:2888:3888:participant
server.3=192.168.222.123:2888:3888:observer
server.4=192.168.222.124:2888:3888:observer