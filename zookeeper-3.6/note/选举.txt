QuorumPeer#start -> QuorumPeer#startLeaderElection 准备开始选举

final ConcurrentHashMap<Long, SendWorker> senderWorkerMap;
final ConcurrentHashMap<Long, ArrayBlockingQueue<ByteBuffer>> queueSendMap;
final ConcurrentHashMap<Long, ByteBuffer> lastMessageSent;

线程：
    WorkerSender        发送sendqueue中的数据（queueSendMap）
    WorkerReceiver      取出recvQueue中的数据

    SendWork            将queueSendMap中数据发送到指定的服务器
    RecvWorker          从监听到的服务器接收数据，放入到recvQueue中

计算Leader
    FastLeaderElection#lookForLeader


server.1=zoo1-net1:2888:3888,zoo1-net2:2888:3888
server.2=zoo2-net1:2888:3888,zoo2-net2:2888:3888
server.3=zoo3-net1:2888:3888

org.apache.zookeeper.server.quorum.QuorumPeer.start


开启Leader选举
listener.start()
1、每一个server配置了多少个net，就会有多少个ListenerHandler
    每一个ListenerHandler监听一个net的选举端口
        QuorumCnxManager.Listener.ListenerHandler.acceptConnections
        都会阻塞在上面的方法中，等待其他server的连接请求
FastLeaderElection#start

2、启动发送和接收消息的线程
    FastLeaderElection.Messenger.WorkerSender
        从sendqueue队列中取出数据发送
    FastLeaderElection.Messenger.WorkerReceiver
        从recvQueue队列中取出接收到的数据

org.apache.zookeeper.server.quorum.QuorumPeer#run

    Looking状态，在这里循环发送接收选票 : org.apache.zookeeper.server.quorum.FastLeaderElection#lookForLeader

    第一次发送自己的选票给所有的Follower  =>  sendNotifications => sendqueue.add(ToSend选票)
        发送逻辑： FastLeaderElection.Messenger.WorkerSender#run 从sendqueue中取出选票  =>  process
            => QuorumCnxManager#toSend => 不是发送给自己的（把serverId和数据放入queueSendMap中）
            => 连接Follower => QuorumCnxManager#connectOne(ServerId) =>  QuorumCnxManager#connectOne(ServerId,electionAddr)
            => initiateConnectionAsync开启一个任务去处理连接 => QuorumConnectionReqThread(electionAddr, sid)#run
            => QuorumCnxManager#initiateConnection(electionAddr, sid) -> 与Follower建立连接
            => QuorumCnxManager#startConnection处理连接
                => 发送 protocolVersion + mySID + 自己的IP
                如果当前客户端的serverId小于服务端的serverId  =>  关闭socket
                否则: 初始化启动 SendWorker + RecvWorker
            => SendWorker#run从queueSendMap取出待发送的队列  并从队列中取出ByteBuffer
            => QuorumCnxManager.SendWorker#send 发送ByteBuffer
                 dout.writeInt(b.capacity());
                 dout.write(b.array());
                 dout.flush();

发送的数据
ToSend notmsg = new ToSend(
                    ToSend.mType.notification,
                    proposedLeader,
                    proposedZxid,
                    logicalclock.get(),
                    QuorumPeer.ServerState.LOOKING,
                    sid,
                    proposedEpoch,


读取数据
// 数据长度
final int capacity = response.buffer.capacity();
// 机器状态
int rstate = response.buffer.getInt();
// leader
long rleader = response.buffer.getLong();
// 最后一次的事务id
long rzxid = response.buffer.getLong();
// 选择的epoch
long relectionEpoch = response.buffer.getLong();

long rpeerepoch = response.buffer.getLong();



配置文件的解析： QuorumPeerConfig#parseProperties

解析server的配置: QuorumPeerConfig#setupQuorumPeerConfig

解析过程： QuorumPeerConfig#parseDynamicConfig

核心代码:  QuorumVerifier qv = createQuorumVerifier(dynamicConfigProp, isHierarchical);
    存在负载均衡: new QuorumHierarchical
    不存在，默认: new QuorumMaj

    在new QuorumMaj中无法解析[server.1=zoo1-net1:2888:3888,zoo1-net2:2888:3888]这种配置的server

    new QuorumServer() 里面解析server Addr , LearnerType , client Addr

角色只能配置两种 participant / observer QuorumPeer.QuorumServer.getType











netstat -tno
netstat -antp
netstat -antop

NETSTAT [-a] [-b] [-e] [-f] [-n] [-o] [-p proto] [-r] [-s] [-x] [-t] [interval]

  -a            显示所有连接和侦听端口。
  -b            显示在创建每个连接或侦听端口时涉及的
                可执行程序。在某些情况下，已知可执行程序承载
                多个独立的组件，这些情况下，
                显示创建连接或侦听端口时
                涉及的组件序列。在此情况下，可执行程序的
                名称位于底部 [] 中，它调用的组件位于顶部，
                直至达到 TCP/IP。注意，此选项
                可能很耗时，并且在你没有足够
                权限时可能失败。
  -e            显示以太网统计信息。此选项可以与 -s 选项
                结合使用。
  -f            显示外部地址的完全限定
                域名(FQDN)。
  -n            以数字形式显示地址和端口号。
  -o            显示拥有的与每个连接关联的进程 ID。
  -p proto      显示 proto 指定的协议的连接；proto
                可以是下列任何一个: TCP、UDP、TCPv6 或 UDPv6。如果与 -s
                选项一起用来显示每个协议的统计信息，proto 可以是下列任何一个:
                IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 或 UDPv6。
  -q            显示所有连接、侦听端口和绑定的
                非侦听 TCP 端口。绑定的非侦听端口
                 不一定与活动连接相关联。
  -r            显示路由表。
  -s            显示每个协议的统计信息。默认情况下，
                显示 IP、IPv6、ICMP、ICMPv6、TCP、TCPv6、UDP 和 UDPv6 的统计信息;
                -p 选项可用于指定默认的子网。
  -t            显示当前连接卸载状态。
  -x            显示 NetworkDirect 连接、侦听器和共享
                终结点。
  -y            显示所有连接的 TCP 连接模板。
                无法与其他选项结合使用。
  interval      重新显示选定的统计信息，各个显示间暂停的
                间隔秒数。按 CTRL+C 停止重新显示
                统计信息。如果省略，则 netstat 将打印当前的
                配置信息一次。













