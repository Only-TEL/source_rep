框架中乱用Post和Get请求
JPA中的insertBatch默认存在事务管制，插入数据的时候会锁表

服务端入口：
    NIOServerCnxnFactory#startup
    NIOServerCnxnFactory#run
设置请求处理器
ZooKeeperServer#setupRequestProcessors

启动serverCnxnFactory
    NIOServerCnxnFactory#run
        - 检查客户端
        - 接受客户端请求
    处理请求NIOServerCnxn#doIO
        - 读就绪
        - 写就绪
        读取请求 NIOServerCnxn#readPayload
            - readConnectRequest 处理连接请求
            - readRequest 处理其他请求
        处理packet
            ZooKeeperServer.processPacket
            把这个packet读取出来

        服务器处理请求:ZooKeeperServer#submitRequest


1、服务端的watcher是怎么触发的 -> 内存中的数据是在哪里被更新的？
    内存中的数据更新： FinalRequestProcessor#processRequest => rc = zks.processTxn(hdr, txn);
    向dataNode中添加watcher在 zks.processTxn 方法之后执行？
        事件类型只有5种，并不是任何一个操作都会触发事件，只是说如果有一个客户端在某个节点注册了一个NodeDataChanged watcher
        那么其他客户端在修改这个节点的时候，会触发注册watcher客户端的watcher，并且原生的客户端只会触发一次

2、客户端接收watcher的处理流程
    服务端发送：NIOServerCnxn#process
        =>  ReplyHeader h = new ReplyHeader(-1, -1L, 0);
            sendResponse(h, e, "notification")
    客户端接收：ClientCnxn.SendThread#readResponse
        =>  replyHdr.getXid() == -1
        =>  拿出服务器中发布过来的事件类型
            None (-1),
            NodeCreated (1),
            NodeDeleted (2),
            NodeDataChanged (3),
            NodeChildrenChanged (4);
        => 将路径和事件类型构成一个新的WatchedEvent => WatcherSetEventPair ,在构建这个WatcherSetEventPair对象的时候，执行ZKWatchManager#materialize
            根据事件类型返回不同的Watcher集合
            注意：在添加的时候会将这个Waatcher从原来的Map中移除
               addTo(dataWatches.remove(clientPath), result);
        => 调用EventThread#queueEvent方法，将we加入到waitingEvents中
        => EventThread监听到waitingEvents这个阻塞队列中存在数据是，就会来处理这个we
        => 如果是 WatcherSetEventPair 类型，就会循环pair.watchers 执行  watcher.process(pair.event);
        => EventThread#processEvent => 调用we的process方法

客户端
    request => 属性：boolean watch 表示这个请求是否存在watcher

在服务端修改数据或者创建等操作时，会检查请求是否存在watch。如果存在watcher，会在操作内存中这个节点的时候默认指定一个Watcher()

Packet{
    RequestHeader requestHeader,
    ReplyHeader replyHeader,
    Record request,
    Record response,
    WatchRegistration registration
}
    当接收到服务器发送回来的packet时，如果这个packet存在registration，则会将调用这个注册其的register方法
    将注册器中的watcher注册到 DataWatchRegistration#register Map<String, Set<Watcher>> watches中
    而这个watches存在三种：ZooKeeper.ZKWatchManager类中，根据registration类型不同，会将watcher注册到不同的Map中
        private final Map<String, Set<Watcher>> dataWatches = new HashMap<String, Set<Watcher>>();
        private final Map<String, Set<Watcher>> existWatches = new HashMap<String, Set<Watcher>>();
        private final Map<String, Set<Watcher>> childWatches = new HashMap<String, Set<Watcher>>();

DataWatchRegistration/ChildWatchRegistration/ExistsWatchRegistration watcher的注册器
{
    Watcher watcher,
    String path
}


调用请求处理链来处理请求：RequestProcessor.processRequest
    - PrepRequestProcessor#processRequest -> 把请求加入到这个PrepRequestProcessor中的LinkedBlockingQueue中 -> PrepRequestProcessor是一个线程类
        -> 监听阻塞队列，如果阻塞队列中有request，就会处理这个request -> PrepRequestProcessor#run
        -> PrepRequestProcessor#pRequest -> PrepRequestProcessor#pRequest2Txn
        -> nextProcessor.processRequest(request)
    - SyncRequestProcessor#processRequest -> LinkedBlockingQueue.add(request) -> SyncRequestProcessor#run
        ->SyncRequestProcessor#flush刷新流 -> nextProcessor.processRequest(request)
    - FinalRequestProcessor#processRequest -> 从outstandingChanges数组中取出ChangeRecord -> ZooKeeperServer#processTxn
        -> ZKDatabase.processTxn更新内存 -> DataTree#processTxn

3、客户段触发close的流程









Watch是轻量级的，其实就是本地JVM的Callback，服务器端只是存了是否有设置了Watcher的布尔类型。
在服务端，在FinalRequestProcessor处理对应的Znode操作时，会根据客户端传递的watcher变量，添加到对应的ZKDatabase
    （org.apache.zookeeper.server.ZKDatabase）中进行持久化存储，同时将自己NIOServerCnxn做为一个Watcher callback，监听服务端事件变化


Leader通过投票通过了某次Znode变化的请求后，然后通知对应的Follower，Follower根据自己内存中的zkDataBase信息，发送notification信息给zookeeper客户端。
Zookeeper客户端接收到notification信息后，找到对应变化path的watcher列表，挨个进行触发回调。





























